"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Memoizatin for async functions, which releases the cache right after the promise is resolved.
 * Intermediate calls will wait for the first one. This prevents simultaneous executions for writing the same files for an example.
 */
function memoize(fn, createKey) {
    const processingTasks = new Map();
    // Anyone who can type better out there?
    const memoized = async (...args) => {
        const key = createKey(...args);
        if (processingTasks.has(key)) {
            return processingTasks.get(key);
        }
        const promise = fn(...args);
        processingTasks.set(key, promise);
        const resolvedValue = await promise;
        processingTasks.delete(key);
        return resolvedValue;
    };
    return memoized;
}
exports.default = memoize;
