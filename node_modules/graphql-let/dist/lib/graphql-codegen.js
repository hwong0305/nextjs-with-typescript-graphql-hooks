"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@graphql-codegen/core");
const fs_1 = require("fs");
const graphql_tag_1 = __importDefault(require("graphql-tag"));
const make_dir_1 = __importDefault(require("make-dir"));
const path_1 = __importDefault(require("path"));
const create_codegen_opts_1 = __importDefault(require("./create-codegen-opts"));
const { writeFile } = fs_1.promises;
async function processGraphQLCodegen(codegenOpts, tsxFullPath, gqlRelPath, gqlContent) {
    const documents = gqlContent
        ? [
            {
                location: gqlRelPath,
                document: graphql_tag_1.default(gqlContent),
            },
        ]
        : [];
    const tsxContent = await core_1.codegen({
        ...codegenOpts,
        filename: tsxFullPath,
        documents,
    });
    await make_dir_1.default(path_1.default.dirname(tsxFullPath));
    await writeFile(tsxFullPath, tsxContent);
    return tsxContent;
}
exports.processGraphQLCodegen = processGraphQLCodegen;
/**
 * Process graphql-codegen including calling "loadSchema", which is also a possibly expensive function
 */
async function processGraphQLCodegenFromConfig(config, userDir, tsxFullPath, gqlRelPath, gqlContent) {
    const codegenOpts = await create_codegen_opts_1.default(config, userDir);
    return await processGraphQLCodegen(codegenOpts, tsxFullPath, gqlRelPath, gqlContent);
}
exports.processGraphQLCodegenFromConfig = processGraphQLCodegenFromConfig;
