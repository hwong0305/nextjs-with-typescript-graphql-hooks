"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fast_glob_1 = __importDefault(require("fast-glob"));
const fs_1 = require("fs");
const hash_1 = __importDefault(require("./hash"));
const paths_1 = require("./paths");
const graphql_codegen_1 = require("./graphql-codegen");
const { readFile } = fs_1.promises;
function shouldGenResolverTypes(commandOpts, config) {
    if (paths_1.isURL(config.schema))
        return;
    try {
        require('@graphql-codegen/typescript');
        require('@graphql-codegen/typescript-resolvers');
        return true;
    }
    catch (e) {
        // Just skip.
        return false;
    }
}
exports.shouldGenResolverTypes = shouldGenResolverTypes;
async function getHashOfSchema(cwd, schemaPattern) {
    // Instead of concatenating all the schema content,
    // concatenating hashes for the contents to save memory.
    const hashes = [];
    for (const schemaFullPath of await fast_glob_1.default(schemaPattern, {
        cwd,
        absolute: true,
    })) {
        const content = await readFile(schemaFullPath);
        hashes.push(hash_1.default(content));
    }
    return hash_1.default(hashes.join(''));
}
async function processGenerateResolverTypes(cwd, config, codegenOpts) {
    const hash = await getHashOfSchema(cwd, config.schema);
    const { tsxFullPath, gqlRelPath, dtsFullPath } = paths_1.createPaths(cwd, config.generateDir, '__concatedschema__', hash);
    await graphql_codegen_1.processGraphQLCodegen({
        ...codegenOpts,
        pluginMap: {
            '@graphql-codegen/typescript': require('@graphql-codegen/typescript'),
            '@graphql-codegen/typescript-resolvers': require('@graphql-codegen/typescript-resolvers'),
        },
        plugins: [
            { '@graphql-codegen/typescript': {} },
            { '@graphql-codegen/typescript-resolvers': {} },
        ],
    }, tsxFullPath, gqlRelPath, '');
    return { tsxFullPath, dtsFullPath, gqlRelPath };
}
exports.processGenerateResolverTypes = processGenerateResolverTypes;
